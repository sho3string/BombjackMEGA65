#!/usr/bin/env python3
import os
import sys
import zipfile
import tempfile
import shutil
import hashlib

# Bombjack

TEHKAN_SET1_FILES = [
    "09_j01b.bin", "10_l01b.bin","11_m01b.bin","12_n01b.bin", "13.1r", 
    "01_h03t.bin",
    "03_e08t.bin","04_h08t.bin","05_k08t.bin",
    "06_l08t.bin","07_n08t.bin","08_r08t.bin",
    "16_m07b.bin","15_l07b.bin","14_j07b.bin",
    "02_p04t.bin"
]

TEHKAN_SET1_CHK = {
    "09_j01b.bin": "51dd6a2688b42e9f28f0882bd76f75be7ec3222a", 
    "10_l01b.bin": "e1cdc4b4efbc6c7a1e4fa65019486617f2acba1b",
    "11_m01b.bin": "43bae56494ac0202aaa8f1ed5c1ed1bff775b2b8",
    "12_n01b.bin": "8b3c49e21ea4952cae7042890d1be2115f7d6fda",
    "13.1r"      : "67654155e42821ea78a655f869fb81c8d6387f63",
    "01_h03t.bin": "318face9f7a7ab6c7eeac773995040425e780aaf",
    "03_e08t.bin": "94ef52ef47b4399a03528fe3efeac9c1d6983446",
    "04_h08t.bin": "e29ba193f21aa898499187603b25d2e226a07c7b",
    "05_k08t.bin": "a66808ef2d62fca2854396898b86bac9be5f17a3",
    "06_l08t.bin": "515128a3971fcb97b60c5b6bdd2b03026aec1921",
    "07_n08t.bin": "6db6006a6e20ff7c243d88293ca53681c4703ea5",
    "08_r08t.bin": "e7897dca4c145f10b7d975b8ef0e4d8aa9354c25",
    "16_m07b.bin": "de71bcd67f97d05527f2504fc8430be333fb9ec2",
    "15_l07b.bin": "20c64593ab9fcb04cefbce0cd5d17ce3ff26441b",
    "14_j07b.bin": "ed1746c15cdb04fae888601d940183d5c7702282",
    "02_p04t.bin": "ac18a8219f99ba9178b96c9564de3978e39c59fd"
}



def calculate_sha1(file_path):
    sha1_hash = hashlib.sha1()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha1_hash.update(byte_block)
    return sha1_hash.hexdigest()

def verify_checksums(temp_path,EXPECTED_CHKSM,EXPECTED_FILES):
    for file in EXPECTED_FILES:
        file_path = os.path.join(temp_path, file)
        calculated_checksum = calculate_sha1(file_path)
        expected_checksum = EXPECTED_CHKSM[file]
        if calculated_checksum != expected_checksum:
            print(f"Error: Checksum mismatch for {file}")
            print(f"Expected: {expected_checksum}")
            print(f"Calculated: {calculated_checksum}")
            sys.exit(1)
            
def main():

    # set pointer to particular version of Galaga.
    EXPECTED_FILES = ""
    EXPECTED_CHKSM = {}
    
    print("Bomjack for MEGA65: ROM Installer")
    print("================================\n")
    if len(sys.argv) != 3:
        print("The Bomjack core expects the files generated by this script located in the folder /arcade/bombjack on your SD card.")
        print("This script supports the following versions of Galaga.\n")
        print("bombjack          Bomb Jack (set 1)             (Tehkan, 1984)")
        print("bombjack2         Bomb Jack (set 2)             (Tehkan, 1984)")
        print("bombjackt         Bomb Jack (Tecfri, Spain)     (Tehkan (Tecfri licence), 1984)")
        print("Usage: script.py <path to the zip file> <output_folder>")
        sys.exit(1)

    if len(sys.argv) > 1:
        argument_value = sys.argv[1]
        fileName = os.path.split(argument_value)[1]
        if fileName == "bombjack.zip":     # Galaga Midway set 1
            EXPECTED_FILES=TEHKAN_SET1_FILES
            EXPECTED_CHKSM=TEHKAN_SET1_CHK
        else:
            print ("No match found for",sys.argv[1],"\n")
            print ("Suitable roms are bombjack.zip, bombjack2.zip, bombjackt.zip\n")
            return
    

    rom_zip_path = sys.argv[1]
    output_folder = sys.argv[2]

    if not os.path.exists(output_folder):
        print(f"Creating output folder: {output_folder}")
        os.makedirs(output_folder)

    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"Extracting files to temporary directory: {temp_dir}")
        try:
            with zipfile.ZipFile(rom_zip_path, 'r') as zip_ref:
                zip_ref.extractall(temp_dir)
                missing_files = [f for f in EXPECTED_FILES if not os.path.isfile(os.path.join(temp_dir, f))]
                if missing_files:
                    print(f"Error: Missing files in the provided zip file: {', '.join(missing_files)}")
                    sys.exit(1)

                print("Verifying checksums...")
                verify_checksums(temp_dir,EXPECTED_CHKSM,EXPECTED_FILES)

                # rom1
                print("Merging files and copying to output folder...")
                with open(os.path.join(output_folder, "rom1.rom"), "wb") as rom1:
                    for part in [EXPECTED_FILES[0], EXPECTED_FILES[1], EXPECTED_FILES[2], EXPECTED_FILES[3]]: 
                        print(f"Appending {part} to rom1.rom")
                        with open(os.path.join(temp_dir, part), "rb") as f:
                            rom1.write(f.read())
               
                print("Files extracted and merged successfully.")
                print("Cleaning up temporary files...")

        except FileNotFoundError:
            print(f"Error: ZIP file not found: {rom_zip_path}")
            sys.exit(1)
        except zipfile.BadZipFile:
            print(f"Error: Invalid or corrupted ZIP file: {rom_zip_path}")
            sys.exit(1)

if __name__ == "__main__":
    main()
